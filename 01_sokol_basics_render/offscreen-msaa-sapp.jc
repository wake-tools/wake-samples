/* SPDX-License-Identifier: Zlib
|-------------------------------------------------------------------------------------------------------->>
| https://wake.tools - [offscreen-msaa-sapp.c] - JIT C Runtime - C99+ (extensions)
|-------------------------------------------------------------------------------------------------------->>
| Adapted from the Sokol samples by Andreas 'floooh' (zlib/libpng License)
| Converted to JIT (.jc) - live feedback - safe memory (bound checking) - GDB-ready
| Original: https://github.com/floooh/sokol-samples/blob/master/sapp/offscreen-msaa-sapp.c
|-------------------------------------------------------------------------------------------------------->>
| run: wake offscreen-msaa-sapp.jc
|-------------------------------------------------------------------------------------------------------->>
| WAKE-LANG (Wake-Lang Executable Metadata - parsed by Wake - targets: w32, w64 [Windows 32/64-bit])
|-------------------------------------------------------------------------------------------------------->>
	<:jit:w32|w64>
		#Jit.add .sm/offscreen-msaa-sapp.sm
		>
		|#Jit.depends offscreen-msaa-sapp.glsl
		>
		|{wk.module.hsys.r}wake-tools/shdc-v0.1w/sokol-shdc.exe --input offscreen-msaa-sapp.glsl --output .sm/offscreen-msaa-sapp.glslh --slang hlsl5 -b
		>
		{wk.module.sys.r}wake-tools/tcc-v0.1w/tcc
			-xc -shared {this.file}

			-b -l.{build.sys.r}.wake-tools--tcc.bcheck-atom-v0.1w
			-Werror
			-bench
			-v

			-L {wk.libs}
				-l.{build.sys}.wake-tools--sokol-ig-v0.1w    -I {wk.include}wake-tools/sokol-v0.1w
				-l.{build.sys}.wake-tools--imgui-v0.1w       -I {wk.include}wake-tools/imgui-v0.1w
				-l.{build.sys}.wake-tools--jit-v0.1w         -I {wk.include}wake-tools/jit-v0.1w
				-l.{build.sys}.wake-tools--sapp-v0.1w        -I {wk.include}wake-tools/sapp-v0.1w
				-l.{build.sys}.wake-tools--sgfx-v0.1w        -I {wk.include}wake-tools/sgfx-v0.1w

			-l msvcrt -l shell32 -l dwmapi -l user32

		-o {jit.file}
		>
		#Jit.reload
	<:/jit:>
|-------------------------------------------------------------------------------------------------------->>
*/
//------------------------------------------------------------------------------
//  offscreen-msaa-sapp.c
//  Render to a multisampled offscreen rendertarget texture, resolve into
//  a separate non-multisampled texture, and use this as sampled texture
//  in the display render pass.
//------------------------------------------------------------------------------
#include <jit.h>
#define USE_DBG_UI
#include <sokol.h>

#define LOG(fmt, ...) printf("a: [offscreen-msaa-sapp.jc]:%s:%d: " fmt "\n", __FILE__, __LINE__, ##__VA_ARGS__)

#include "sokol_log.h"
#include "sokol_shape.h"
#define VECMATH_GENERICS
#include <jit/vecmath.h>
#include ".sm/offscreen-msaa-sapp.glslh"

#define OFFSCREEN_WIDTH (256)
#define OFFSCREEN_HEIGHT (256)
#define OFFSCREEN_COLOR_FORMAT (SG_PIXELFORMAT_RGBA8)
#define OFFSCREEN_DEPTH_FORMAT (SG_PIXELFORMAT_DEPTH)
#define OFFSCREEN_SAMPLE_COUNT (4)
#define DISPLAY_SAMPLE_COUNT (4)

static struct {
    struct {
        sg_pass_action pass_action;
        sg_attachments atts;
        sg_pipeline pip;
        sg_bindings bind;
    } offscreen;
    struct {
        sg_pass_action pass_action;
        sg_pipeline pip;
        sg_bindings bind;
    } display;
    sshape_element_range_t sphere;
    sshape_element_range_t donut;
    float rx, ry;
} state;

static void init(void) {
    sg_setup(&(sg_desc){
        .environment = sglue_environment(),
        .logger.func = slog_func,
    });
    __cdbgui_setup(sapp_sample_count());

    // default pass action: clear to green-ish
    state.display.pass_action = (sg_pass_action) {
        .colors[0] = {
            .load_action = SG_LOADACTION_CLEAR,
            .clear_value = { 0.25f, 0.65f, 0.45f, 1.0f }
        },
    };

    // offscreen pass action: clear to grey
    // NOTE: we don't need to store the MSAA render target content, because
    // it will be resolved into a non-MSAA texture at the end of the
    // offscreen pass
    state.offscreen.pass_action = (sg_pass_action) {
        .colors[0] = {
            .load_action = SG_LOADACTION_CLEAR,
            .store_action = SG_STOREACTION_DONTCARE,
            .clear_value = { 0.25f, 0.25f, 0.25f, 1.0f }
        }
    };

    // create a MSAA render target image, this will be rendered to
    // in the offscreen render pass
    const sg_image msaa_image = sg_make_image(&(sg_image_desc){
        .usage.color_attachment = true,
        .width = OFFSCREEN_WIDTH,
        .height = OFFSCREEN_HEIGHT,
        .pixel_format = OFFSCREEN_COLOR_FORMAT,
        .sample_count = OFFSCREEN_SAMPLE_COUNT,
        .label = "msaa-image"
    });

    // create a depth-buffer image for the offscreen pass,
    // this needs the same dimensions and sample count as the
    // render target image
    const sg_image depth_image = sg_make_image(&(sg_image_desc){
        .usage.depth_stencil_attachment = true,
        .width = OFFSCREEN_WIDTH,
        .height = OFFSCREEN_HEIGHT,
        .pixel_format = OFFSCREEN_DEPTH_FORMAT,
        .sample_count = OFFSCREEN_SAMPLE_COUNT,
        .label = "depth-image",
    });

    // create a matching resolve-image where the MSAA-rendered content will
    // be resolved to at the end of the offscreen pass, and which will be
    // texture-sampled in the display pass
    const sg_image resolve_image = sg_make_image(&(sg_image_desc){
        .usage.resolve_attachment = true,
        .width = OFFSCREEN_WIDTH,
        .height = OFFSCREEN_HEIGHT,
        .pixel_format = OFFSCREEN_COLOR_FORMAT,
        .sample_count = 1,
        .label = "resolve-image",
    });

    // populate attachments struct with view objects
    state.offscreen.atts = (sg_attachments){
        .colors[0] = sg_make_view(&(sg_view_desc){
            .color_attachment = { .image = msaa_image },
            .label = "color-attachment",
        }),
        .resolves[0] = sg_make_view(&(sg_view_desc){
            .resolve_attachment = { .image = resolve_image },
            .label = "resolve-attachment",
        }),
        .depth_stencil = sg_make_view(&(sg_view_desc){
            .depth_stencil_attachment = { .image = depth_image },
            .label = "depth-attachment",
        }),
    };

    // create a couple of meshes
    sshape_vertex_t vertices[8000] = { 0 };
    uint16_t indices[48000] = { 0 };
    sshape_buffer_t buf = {
        .vertices.buffer = SSHAPE_RANGE(vertices),
        .indices.buffer  = SSHAPE_RANGE(indices),
    };
    buf = sshape_build_torus(&buf, &(sshape_torus_t) {
        .radius = 0.5f,
        .ring_radius = 0.25f,
        .sides = 40,
        .rings = 72,
    });
    state.sphere = sshape_element_range(&buf);
    buf = sshape_build_torus(&buf, &(sshape_torus_t) {
        .radius = 0.3f,
        .ring_radius = 0.2f,
        .sides = 40,
        .rings = 72,
    });
    state.donut = sshape_element_range(&buf);

    sg_buffer_desc vbuf_desc = sshape_vertex_buffer_desc(&buf);
    sg_buffer_desc ibuf_desc = sshape_index_buffer_desc(&buf);
    vbuf_desc.label = "shape-vbuf";
    ibuf_desc.label = "shape-ibuf";
    sg_buffer vbuf = sg_make_buffer(&vbuf_desc);
    sg_buffer ibuf = sg_make_buffer(&ibuf_desc);

    // a pipeline object for the offscreen-rendered box
    state.offscreen.pip = sg_make_pipeline(&(sg_pipeline_desc){
        .layout = {
            .buffers[0] = sshape_vertex_buffer_layout_state(),
            .attrs = {
                [ATTR_offscreen_position] = sshape_position_vertex_attr_state(),
                [ATTR_offscreen_normal] = sshape_normal_vertex_attr_state(),
            }
        },
        .shader = sg_make_shader(offscreen_shader_desc(sg_query_backend())),
        .index_type = SG_INDEXTYPE_UINT16,
        .cull_mode = SG_CULLMODE_BACK,
        .sample_count = OFFSCREEN_SAMPLE_COUNT,
        .depth = {
            .pixel_format = OFFSCREEN_DEPTH_FORMAT,
            .compare = SG_COMPAREFUNC_LESS_EQUAL,
            .write_enabled = true,
        },
        .colors[0].pixel_format = OFFSCREEN_COLOR_FORMAT,
        .label = "offscreen-pipeline",
    });

    // another pipeline object for the display pass
    state.display.pip = sg_make_pipeline(&(sg_pipeline_desc){
        .layout = {
            .buffers[0] = sshape_vertex_buffer_layout_state(),
            .attrs = {
                [ATTR_display_position] = sshape_position_vertex_attr_state(),
                [ATTR_display_normal] = sshape_normal_vertex_attr_state(),
                [ATTR_display_texcoord0] = sshape_texcoord_vertex_attr_state(),
            },
        },
        .shader = sg_make_shader(display_shader_desc(sg_query_backend())),
        .index_type = SG_INDEXTYPE_UINT16,
        .cull_mode = SG_CULLMODE_BACK,
        .depth = {
            .compare = SG_COMPAREFUNC_LESS_EQUAL,
            .write_enabled = true,
        },
        .label = "display-pipeline",
    });

    // a sampler to sample the render target as texture
    sg_sampler smp = sg_make_sampler(&(sg_sampler_desc){
        .min_filter = SG_FILTER_LINEAR,
        .mag_filter = SG_FILTER_LINEAR,
        .wrap_u = SG_WRAP_REPEAT,
        .wrap_v = SG_WRAP_REPEAT,
        .label = "sampler",
    });

    // the resource bindings for rendering a non-textured shape in the offscreen pass
    state.offscreen.bind = (sg_bindings) {
        .vertex_buffers[0] = vbuf,
        .index_buffer = ibuf,
    };

    // the resource bindings for rendering a texture shape in the display pass,
    // using the msaa-resolved image as texture
    state.display.bind = (sg_bindings) {
        .vertex_buffers[0] = vbuf,
        .index_buffer = ibuf,
        .views[VIEW_tex] = sg_make_view(&(sg_view_desc){
            .texture = { .image = resolve_image },
            .label = "texture-view",
        }),
        .samplers[SMP_smp] = smp,
    };
}

// helper function to compute model-view-projection matrix
static mat44_t compute_mvp(float rx, float ry, float aspect, float eye_dist) {
    const mat44_t proj = mat44_perspective_fov_rh(vm_radians(45.0f), aspect, 0.01f, 10.0f);
    const mat44_t view = mat44_look_at_rh(vec3(0.0f, 0.0f, eye_dist), vec3(0.0f, 0.0f, 0.0f), vec3(0.0f, 1.0f, 0.0f));
    const mat44_t view_proj = vm_mul(view, proj);
    const mat44_t rxm = mat44_rotation_x(vm_radians(rx));
    const mat44_t rym = mat44_rotation_y(vm_radians(ry));
    const mat44_t model = vm_mul(rxm, rym);
    const mat44_t mvp = vm_mul(model, view_proj);
    return mvp;
}

static void frame(void) {
    const float t = (float)(sapp_frame_duration() * 60.0);
    state.rx += 1.0f * t;
    state.ry += 2.0f * t;
    vs_params_t vs_params;

    // the offscreen pass, rendering an rotating, untextured sphere into an msaa render target image,
    // which is then resolved into a regular non-msaa texture at the end of the pass
    vs_params = (vs_params_t) {
        .mvp = compute_mvp(state.rx, state.ry, 1.0f, 2.5f)
    };
    sg_begin_pass(&(sg_pass){
        .action = state.offscreen.pass_action,
        .attachments = state.offscreen.atts,
    });
    sg_apply_pipeline(state.offscreen.pip);
    sg_apply_bindings(&state.offscreen.bind);
    sg_apply_uniforms(UB_vs_params, &SG_RANGE(vs_params));
    sg_draw(state.sphere.base_element, state.sphere.num_elements, 1);
    sg_end_pass();

    // and the display-pass, rendering a rotating textured donut which uses the
    // previously msaa-resolved texture
    int w = sapp_width();
    int h = sapp_height();
    vs_params = (vs_params_t) {
        .mvp = compute_mvp(-state.rx * 0.25f, state.ry * 0.25f, (float)w/(float)h, 1.5f)
    };
    sg_begin_pass(&(sg_pass){ .action = state.display.pass_action, .swapchain = sglue_swapchain() });
    sg_apply_pipeline(state.display.pip);
    sg_apply_bindings(&state.display.bind);
    sg_apply_uniforms(UB_vs_params, &SG_RANGE(vs_params));
    sg_draw(state.donut.base_element, state.donut.num_elements, 1);
    __cdbgui_draw();
    sg_end_pass();

    sg_commit();
    if(jit_request_close) sapp_quit();
}

static void cleanup(void) {
    __cdbgui_shutdown();
    sg_shutdown();
}

int main(int argc, char *argv[]) {
    LOG("JIT MAIN");
    sapp_run(&(sapp_desc){
        .init_cb = init,
        .frame_cb = frame,
        .cleanup_cb = cleanup,
        .event_cb = __cdbgui_event,
        .width = 800,
        .height = 600,
        .sample_count = DISPLAY_SAMPLE_COUNT,
        .swap_interval = 1,
        .window_title = "Offscreen MSAA Rendering (sokol-app)",
        .icon.sokol_default = true,
        .logger.func = slog_func,
    });
    #ifndef HAS_ASYNC_LOOP
    sapp_quit();
    #endif
    return 0;

}

