/* SPDX-License-Identifier: Zlib
|-------------------------------------------------------------------------------------------------------->>
| https://wake.tools - [write-storageimage-sapp.c] - JIT C Runtime - C99+ (extensions)
|-------------------------------------------------------------------------------------------------------->>
| Adapted from the Sokol samples by Andreas 'floooh' (zlib/libpng License)
| Converted to JIT (.jc) - live feedback - safe memory (bound checking) - GDB-ready
| Original: https://github.com/floooh/sokol-samples/blob/master/sapp/write-storageimage-sapp.c
|-------------------------------------------------------------------------------------------------------->>
| run: wake write-storageimage-sapp.jc
|-------------------------------------------------------------------------------------------------------->>
| WAKE-LANG (Wake-Lang Executable Metadata - parsed by Wake - targets: w32, w64 [Windows 32/64-bit])
|-------------------------------------------------------------------------------------------------------->>
	<:jit:w32|w64>
		#Jit.add .sm/write-storageimage-sapp.sm
		>
		|#Jit.depends write-storageimage-sapp.glsl
		>
		|{wk.module.hsys.r}wake-tools/shdc-v0.1w/sokol-shdc.exe --input write-storageimage-sapp.glsl --output .sm/write-storageimage-sapp.glslh --slang hlsl5 -b
		>
		{wk.module.sys.r}wake-tools/tcc-v0.1w/tcc
			-xc -shared {this.file}

			-b -l.{build.sys.r}.wake-tools--tcc.bcheck-atom-v0.1w
			-gdwarf-5
			-Werror
			-bench
			-v

			-L {wk.libs}
				-l.{build.sys}.wake-tools--sokol-ig-v0.1w    -I {wk.include}wake-tools/sokol-v0.1w
				-l.{build.sys}.wake-tools--imgui-v0.1w       -I {wk.include}wake-tools/imgui-v0.1w
				-l.{build.sys}.wake-tools--jit-v0.1w         -I {wk.include}wake-tools/jit-v0.1w
				-l.{build.sys}.wake-tools--sapp-v0.1w        -I {wk.include}wake-tools/sapp-v0.1w
				-l.{build.sys}.wake-tools--sgfx-v0.1w        -I {wk.include}wake-tools/sgfx-v0.1w

			-l msvcrt -l shell32 -l dwmapi -l user32

		-o {jit.file}
		>
		#Jit.reload
	<:/jit:>
|-------------------------------------------------------------------------------------------------------->>
*/
//------------------------------------------------------------------------------
//  write-storageimage-sapp.c
//  A simplest possible sample to write image data with a compute shader.
//------------------------------------------------------------------------------
#include <jit.h>
#define USE_DBG_UI
#include <sokol.h>

#define LOG(fmt, ...) printf("a: [write-storageimage-sapp.jc]:%s:%d: " fmt "\n", __FILE__, __LINE__, ##__VA_ARGS__)

#include "sokol_log.h"
#include ".sm/write-storageimage-sapp.glslh"
#include <math.h>

#define WIDTH (256)
#define HEIGHT (256)

static struct {
    double time;
    sg_image img;
    struct {
        sg_view simg_view;
        sg_pipeline pip;
    } compute;
    struct {
        sg_view tex_view;
        sg_pipeline pip;
        sg_sampler smp;
        sg_pass_action pass_action;
    } display;
} state = {
    .display.pass_action = {
        .colors[0] = { .load_action = SG_LOADACTION_DONTCARE },
    },
};

static void init(void) {
    sg_setup(&(sg_desc){
        .environment = sglue_environment(),
        .logger.func = slog_func,
    });
    __cdbgui_setup(sapp_sample_count());

    // an image object with storage attachment usage
    state.img = sg_make_image(&(sg_image_desc){
        .usage.storage_image = true,
        .width = WIDTH,
        .height = HEIGHT,
        .pixel_format = SG_PIXELFORMAT_RGBA8,
        .label = "storage-image",
    });

    // a storage image view for compute shader access
    state.compute.simg_view = sg_make_view(&(sg_view_desc){
        .storage_image = { .image = state.img },
        .label = "storage-image-view",
    });

    // a texture view for binding the same image as texture
    state.display.tex_view = sg_make_view(&(sg_view_desc){
        .texture = { .image = state.img },
        .label = "texture-view",
    });

    // a compute pipeline object with the compute shader
    state.compute.pip = sg_make_pipeline(&(sg_pipeline_desc){
        .compute = true,
        .shader = sg_make_shader(compute_shader_desc(sg_query_backend())),
        .label = "compute-pipeline",
    });

    // a shader and pipeline for a textured 'fullscreen-triangle' with
    // vertex positions synthesized in the vertex shader, the default
    // pipeline state is sufficient for rendering a 2D triangle
    state.display.pip = sg_make_pipeline(&(sg_pipeline_desc){
        .shader = sg_make_shader(display_shader_desc(sg_query_backend())),
        .label = "display-pipeline",
    });

    // a sampler needed for sampling the storage image as texture
    state.display.smp = sg_make_sampler(&(sg_sampler_desc){
        .mag_filter = SG_FILTER_LINEAR,
        .min_filter = SG_FILTER_LINEAR,
        .label = "display-sampler",
    });
}

static void frame(void) {
    state.time += sapp_frame_duration();

    // a value that fluctuates between 0 and 1
    const double time_offset = (sin(state.time * 4.0) + 1.0) * 0.5;

    // compute pass to update the storage image
    const cs_params_t cs_params = { .offset = (float)time_offset };
    sg_begin_pass(&(sg_pass){ .compute = true, .label = "compute-pass" });
    sg_apply_pipeline(state.compute.pip);
    sg_apply_bindings(&(sg_bindings){
        .views[VIEW_cs_out_tex] = state.compute.simg_view,
    });
    sg_apply_uniforms(UB_cs_params, &SG_RANGE(cs_params));
    sg_dispatch(WIDTH / 16, HEIGHT / 16, 1);    // shader local_size_x/y is 16
    sg_end_pass();

    // and a swapchain pass to render the result
    sg_begin_pass(&(sg_pass){ .action = state.display.pass_action, .swapchain = sglue_swapchain(), .label = "render-pass" });
    sg_apply_pipeline(state.display.pip);
    sg_apply_bindings(&(sg_bindings){
        .views[VIEW_disp_tex] = state.display.tex_view,
        .samplers[SMP_disp_smp] = state.display.smp,
    });
    sg_draw(0, 3, 1);
    __cdbgui_draw();
    sg_end_pass();
    sg_commit();
    if(jit_request_close) sapp_quit();
}

static void cleanup(void) {
    __cdbgui_shutdown();
    sg_shutdown();
}

int main(int argc, char *argv[]) {
    LOG("JIT MAIN");
    sapp_run(&(sapp_desc){
        .init_cb = init,
        .frame_cb = frame,
        .cleanup_cb = cleanup,
        .event_cb = __cdbgui_event,
        .width = 512,
        .height = 512,
        .swap_interval = 1,
        .window_title = "write-storageimage-sapp.c",
        .icon.sokol_default = true,
        .logger.func = slog_func,
    });
    #ifndef HAS_ASYNC_LOOP
    sapp_quit();
    #endif
    return 0;

}

